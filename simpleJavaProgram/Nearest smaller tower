class Solution{
   static int[] smallestLeft(int arr[],int n)
    {
        int res[]=new int[n];
    	 Stack<Integer> s=new Stack<>();
    	  for(int i=0;i<n;i++)
    	  {
    		while(!s.isEmpty() && arr[s.peek()]>=arr[i])
    		s.pop();
    		 if(s.isEmpty())
    			 res[i]=-1;
    		 else
    			 res[i]=s.peek();
    		 s.push(i);
    		 
    	  }
    	  return res;
    }
    static int[] smallestRight(int[] arr,int n)
    {
        int res[]=new int[n];
        Stack<Integer> s = new Stack<>();
       for(int i =n-1;i>=0;i--)
       {
           while(!s.isEmpty() && arr[s.peek()] >= arr[i])
               s.pop();
           if(s.isEmpty())
            res[i] = -1;
           else
               res[i] = s.peek();
           s.push(i);
       }
       return res;
    }
	int [] nearestSmallestTower(int [] arr){
		//Write your code here
		int left[]=smallestLeft(arr,arr.length);
		int right[]=smallestRight(arr,arr.length);
		int ans[]=new int[arr.length];
	
		for(int i =0;i<arr.length;i++)
        {
            if(left[i] == -1 && right[i] == -1)
                ans[i] =-1;
            else if(left[i] != -1 && right[i] == -1)
                ans[i] = left[i];
            else if(left[i] == -1 && right[i] != -1)
                ans[i] = right[i];
            else
            {
                int dis1 = i-left[i];
                int dis2 = right[i]-i;
                if(dis1 < dis2)
                {
                    ans[i] = left[i];
                }
                else if(dis2 < dis1)
                {
                   ans[i] = right[i]; 
                }
                else
                {
                    if(arr[right[i]] < arr[left[i]])
                    {
                       ans[i] = right[i];
                    }
                    else
                  
                    {
                       ans[i] =left[i];
                    }
                }
            }
        }
		return ans;
		
	}
}
